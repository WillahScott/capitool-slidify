demo()
list.files()
x<-3:14:2
x
x<-3:2:14
x
c(1,3)
a<-[1,2,3]
a<-c(1,2,3)
a[7]
a[3]
a[6] <- 33
a[5]
a
install.packages("tcltk")
library(rpanel)
install.packages("ggobi")
install.packages("rggobi")
install.packages("tcltk2")
require(rpanel)
library(tcltk)
library(tcltk2)
capabilities("tcltk")
library(tcltk)
install.packages("tcltk")
ls("package:tcltk")
library(tcktk)
library(tcltk)
capabilities()["tcltk"]
install.packages("tcltk")
library(tcltk)
CI <- function(mu,s,n) mu + c(-1,1) * qt(.975,n-1) * s/sqrt(n)
CI(.01,.0005,10)
CI(.01,.0005,1)
CI(.01,.0005,3)
CI(.01,.5,3)
CI(.01,.005,3)
CI(.01,1,3)
CI(.01,1,10)
CI(.01,1,100)
CI(.01,1,1000)
CI(.01,1,10000)
CI(.01,1,1000000)
CI(.01,1,100000)
CI(.01,1,1000000)
pbinom(q=4,size=10,prob=.5)
1-pbinom(q=6,size=10,prob=.5)
1-pbinom(q=7,size=10,prob=.5)
pbinom(q=6,size=10,prob=.5,lower.tail=TRUE)
pbinom(q=3,size=10,prob=.5,lower.tail=TRUE)
pbinom(q=4,size=10,prob=.5)
pbinom(q=40,size=100,prob=.5)
pbinom(q=40,size=110,prob=.5)
pbinom(q=40,size=105,prob=.5)
pbinom(q=44,size=110,prob=.5)
pbinom(q=60,size=150,prob=.5)
pbinom(q=70,size=175,prob=.5)
0.9*175
pbinom(q=1.575,size=175,prob=.01)
pbinom(q=1.575,size=10000,prob=.01)
conf <- function(PD,lower,N) 1 - pbinom(q=N*lower/100,size=N,prob=PD/100)*2
conf(50,40,175)
conf(50,40,100)
conf(1,.9,100)
conf(1,.9,10000)
conf(1,.9,20000)
conf(1,.9,25000)
conf(1,.9,30000)
conf(1,.9,35000)
conf(1,.9,40000)
conf(1,.9,45000)
conf(1,.9,50000)
conf(1,.9,55000)
conf(1,.9,60000)
conf(1,.9,65000)
conf(1,.85,40000)
conf(1,.85,10000)
conf(1,.85,20000)
conf(1,.85,15000)
conf(1,.85,17000)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
print(fit)
with(mtcars, lm(mpg ~ weight))
with(mtcars, lm(mpg ~ wt))
.4 * 1.4
x.norm <- (x - mean(x))/sd(x)
x.norm
x[1]
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x.norm <- (x - mean(x))/sd(x)
x[1]
x.norm[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
print(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x + 0)
print(fit)
getCoefTable <- function(x,y,beta1=cor(y, x) * sd(y) / sd(x),
beta0=mean(y) - beta1 * mean(x)) {
n <- length(y)
#     beta1 <- cor(y, x) * sd(y) / sd(x)
#     beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0
tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
return(coefTable)
}
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
getCoefTable(x,y)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x + 0)
sd(resid(fit))
fit <- lm(y ~ x)
sd(resid(fit))
c <- with(mtcars, getCoefTable(x=(wt-3), y=mpg))
n <- nrow(mtcars)
c[1,1] + qt(.975, df=n-2) * c[1,2]
c <- with(mtcars, getCoefTable(x=(wt-3), y=mpg))
n <- nrow(mtcars)
c[1,1] + qt(.025, df=n-2) * c[1,2]
c <- with(mtcars, getCoefTable(x=wt, y=mpg))
n <- nrow(mtcars)
2*(c[2,1] + qt(.025, df=n-2) * c[2,2])
nrow(mtcars)
names(mtcars)
head(mtcars,2)
help(mtcars)
transimission <- split(x=mtcars,f=factor(am))
transimission <- split(x=mtcars,f=factor(mtcars$am))
head(transimission)
str(transimission)
transimission <- split(x=mtcars,f=factor(mtcars$am,labels=c("automatic","manual")))
transimission
transm.length <- lapply(X=mtcars, FUN=nrows)
transm.length <- lapply(X=mtcars, FUN=nrow)
transm.length
transm.length <- lapply(X=transimission, FUN=nrow)
transm.length
plot(mtcars$am, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ am, data=mtcars),lwd = 2)
plot(mtcars$am, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ am, data=mtcars),lwd = 2)
abline(lm(mpg ~ I(am - meand(mpg)), data=mtcars),color = 'red', lwd = 2)
plot(mtcars$am, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ am, data=mtcars),lwd = 2)
abline(lm(mpg ~ I(am - mean(mpg)), data=mtcars),color = 'red', lwd = 2)
plot(mtcars$am, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ am, data=mtcars),lwd = 2)
abline(lm(mpg ~ I(am - mean(mpg)), data=mtcars),col = 'red', lwd = 2)
lm(mpg ~ I(am - mean(mpg)), data=mtcars)
plot(lm(mpg ~ I(am - mean(mpg)), data=mtcars))
names(mtcars)
mtcars2 <- mtcars
mtcars2$trnsm <- factor(mtcars$am,labels=c("automatic","manual"))
plot(mtcars2$trnsm, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ trnsm, data=mtcars),lwd = 2)
mtcars2 <- mtcars
mtcars2$trnsm <- factor(mtcars$am,labels=c("automatic","manual"))
plot(mtcars2$trnsm, mtcars$mpg, xlab='Transmission', ylab='MPGs')
abline(lm(mpg ~ trnsm, data=mtcars2),lwd = 2)
fit.aut <- lm(mpg ~ wt + hp, data=transmission$automatic)
transimssion <- split(x=mtcars,f=factor(mtcars$am,labels=c("automatic","manual")))
fit.aut <- lm(mpg ~ wt + hp, data=transmission$automatic)
transmission <- split(x=mtcars,f=factor(mtcars$am,labels=c("automatic","manual")))
fit.aut <- lm(mpg ~ wt + hp, data=transmission$automatic)
summary(fit.aut)
fit.mnl <- lm(mpg ~ wt + hp, data=transmission$manual)
summary(fit.mnl)
source('~/.active-rstudio-document')
names(mtcars)
fit.mnl2 <- lm(mpg ~ wt + qsec, data=transmission$manual)
summary(fit.mnl2)
fit.mnl2 <- lm(mpg ~ wt + gear, data=transmission$manual)
summary(fit.mnl2)
summary(mtcars$vs)
plot(mtcars$vs)
fit.mnl2 <- lm(mpg ~ wt + carb, data=transmission$manual)
summary(fit.mnl2)
fit.mnl2 <- lm(mpg ~ wt + disp, data=transmission$manual)
summary(fit.mnl2)
fit.mnl2 <- lm(mpg ~ disp, data=transmission$manual)
summary(fit.mnl2)
fit.mnl2 <- lm(mpg ~ hp + disp, data=transmission$manual)
summary(fit.mnl2)
fit.mnl2 <- lm(mpg ~ hp, data=transmission$manual)
summary(fit.mnl2)
fit.aut <- lm(mpg ~ hp, data=transmission$automatic)
summary(fit.aut)
fit.mnl2 <- lm(mpg ~ hp, data=transmission$manual)
summary(fit.mnl2)
fit.aut2 <- lm(mpg ~ wt, data=transmission$automatic)
summary(fit.aut2)
fit.mnl2 <- lm(mpg ~ wt, data=transmission$manual)
summary(fit.mnl2)
with(transmission$automatic, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkblue') )
abline(fit.auto,lwd=2,col='darkblue')
fit.auto <- lm(mpg ~ wt, data=transmission$automatic)
summary(fit.aut2)
# Residuals:
#     Min      1Q  Median      3Q     Max
# -3.6004 -1.5227 -0.2168  1.4816  5.0610
#
# Coefficients:
#     Estimate Std. Error t value Pr(>|t|)
# (Intercept)  31.4161     2.9467  10.661 6.01e-09 ***
#     wt           -3.7859     0.7666  -4.939 0.000125 ***
#     ---
#     Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 2.528 on 17 degrees of freedom
# Multiple R-squared:  0.5893,    Adjusted R-squared:  0.5651
# F-statistic: 24.39 on 1 and 17 DF,  p-value: 0.0001246
fit.mnl <- lm(mpg ~ wt, data=transmission$manual)
summary(fit.mnl2)
# Residuals:
#     Min      1Q  Median      3Q     Max
# -2.4190 -1.4937 -1.2234  0.8228  6.0909
#
# Coefficients:
#     Estimate Std. Error t value Pr(>|t|)
# (Intercept)   46.294      3.120  14.839 1.28e-08 ***
#     wt            -9.084      1.257  -7.229 1.69e-05 ***
#     ---
#     Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 2.686 on 11 degrees of freedom
# Multiple R-squared:  0.8261,    Adjusted R-squared:  0.8103
# F-statistic: 52.26 on 1 and 11 DF,  p-value: 1.688e-05
with(transmission$automatic, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkblue') )
abline(fit.auto,lwd=2,col='darkblue')
with(transmission$manual, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkgreen') )
abline(fit.mnl,lwd=2,col='darkgreen')
with(transmission$automatic, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkblue') )
abline(fit.auto,lwd=2,col='darkblue')
with(transmission$manual, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkgreen') )
abline(fit.mnl,lwd=2,col='darkgreen')
with(transmission$automatic, plot(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkblue') )
abline(fit.auto,lwd=2,col='darkblue')
with(transmission$manual, points(wt, mpg, xlab='Weight (lb/1000)', ylab='MPG',
col = 'darkgreen') )
abline(fit.mnl,lwd=2,col='darkgreen')
mean(80,125,140,85)
mean(c(80,125,140,85))
creds <- [9,9,12,9,7.5,15]
notas <- [10,9.5,7.8,7,10,9.5]
creds <- c(9,9,12,9,7.5,15)
notas <- c(10,9.5,7.8,7,10,9.5)
creds*notas/sum(creds)
sum(creds*notas)/sum(creds)
qbinom(p = 10**(-7), prob = .5, size = 100000)
qbinom(p = .1, prob = .5, size = 10)
qbinom(p = 10**(-7), prob = .5, size = 1000000)
qbinom(p = 10**(-7), prob = .5, size = 1000000000)
pbinom(p = 10**(-7), prob = .5, size = 100000)
pbinom(q = .5,prob = 10**(-7), size = 10000)
pbinom(q = .5,prob = 10**(-7), size = 10)
pbinom(q = .5,prob = 10**(-7), size = 1)
pbinom(q = .5,prob = 10**(-7), size = 10000000)
pbinom(q = .5,prob = 10**(-7), size = 1000000)
pbinom(q = .5,prob = 10**(-7), size = 100000)
pbinom(q = .5,prob = 10**(-7), size = 10**5)
pbinom(q = .5,prob = 10**(-7), size = 10**6)
pbinom(q = .5,prob = 10**(-7), size = 10**7)
pbinom(q = .5,prob = 10**(-7), size = 2*10**6)
pbinom(q = .5,prob = 10**(-7), size = 5*10**6)
pbinom(q = .5,prob = 10**(-7), size = 7*10**6)
pbinom(q = .5,prob = 10**(-10), size = 7*10**6)
pbinom(q = .5,prob = 10**(-10), size = 7*10**7)
pbinom(q = .5,prob = 10**(-10), size = 7*10**8)
pbinom(q = .5,prob = 10**(-10), size = 7*10**9)
pbinom(q = .5,prob = 10**(-10), size = 6*10**9)
pbinom(q = .5,prob = 10**(-10), size = 6.5*10**9)
pbinom(q = 1, prob=1/6, size=2)
pbinom(q = 1, prob=1/6, size=2)
1/6 + 1/6 * 5/6
pbinom(q = 1, prob=1/6, size=2, lower.tail = false)
pbinom(q = 1, prob=1/6, size=2, lower.tail = False)
pbinom(q = 1, prob=1/6, size=2, lower.tail = FALSE)
dbinom(q = 1, prob=1/6, size=2)
dbinom(prob=1/6, size=2)
pbinom(q = 0, prob=1/6, size=2)
1 - pbinom(q = 0, prob=1/6, size=2)
1 - pbinom(q = 0, prob=10**(-7), size=10**5)
1 - pbinom(q = 0, prob=10**(-7), size=10**6)
1 - pbinom(q = 0, prob=10**(-10), size=10**6)
1 - pbinom(q = 0, prob=10**(-10), size=10**10)
1 - pbinom(q = 0, prob=10**(-10), size=10**9)
1 - pbinom(q = 0, prob=10**(-10), size=6.5 * 10**9)
1 - pbinom(q = 0, prob=10**(-10), size= 7 * 10**9)
7* 10**(9) / 30
pi
install.packages('installr')
library(installr)
update.packages()
update.packages(ask = F)
library(caret)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(624333)
modRF <- train(y~., data=vowel.train, method='rf', prox=T)
set.seed(624333)
modRF <- train(y~., data=training, method='rf', prox=T)
modRF <- train(diagnosis~., data=training, method='rf', prox=T)
modBST <- train(diagnosis~., data=training, method='gbm')
modLDA <- train(diagnosis~., data=training, method='lda')
modLDA
modBST
modRF
predictions <- data.frame(actuals=training$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing),
)
predictions <- data.frame(actuals=training$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing)
)
predictions <- data.frame(actuals=testing$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing)
)
modRF <- train(actuals~., data=predictions, method='rf', prox=T)
modRF
modStackRF <- train(actuals~., data=predictions, method='rf', prox=T)
modRF <- train(diagnosis~., data=training, method='rf', prox=T)
predictions$stacked <- predict(modStackRF, testing)
predictions$stacked <- predict(modStackRF, testing)
library(randomForest)
predictions$stacked <- predict(modStackRF, testing)
predictions$stacked <- predict(modStackRF, testing)
traceback()
predictions$stacked <- predict(modStackRF, predictions)
predictions$RF.acc <- predictions$actual == predictions$RF
predictions$BST.acc <- predictions$actual == predictions$BST
predictions$LDA.acc <- predictions$actual == predictions$LDA
predictions$stacked.acc <- predictions$actual == predictions$stacked
with(predictions, sum(RF.acc) / length(RF.acc))
with(predictions, sum(BST.acc) / length(BST.acc))
with(predictions, sum(LDA.acc) / length(LDA.acc))
with(predictions, sum(stacked.acc) / length(stacked.acc))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
modLASSO <- train(CompressiveStrength~., data=training, method='lasso')
mod
modLASSO
?plot.enet
plot.enet(modLASSO)
plot.enet(modLASSO,x=1:100)
plot.enet(modLASSO)
plot(modLASSO$glmnet.fit, "norm", label=TRUE)
modLASSO$finalModel
plot.enet(modLASSO$finalModel, xvar="penalty", use.color=T)
plot.enet(modLASSO$finalModel, xvar="penalty", use.color=T, label=T)
install.packages('e17017')
diag(c(1,2,3),3,3)
A <- matrix(data = c(0,-1,-1,0,0,0, -1,0,0,-1,0,-1, -1,0,0,-1,0,0
0,-1,-1,0,-1,0, 0,0,0,-1,0,-1, 0,-1,0,0,-1,0),
nrow=6)
A <- matrix(data=c(0,-1,-1,0,0,0, -1,0,0,-1,0,-1, -1,0,0,-1,0,0,
0,-1,-1,0,-1,0, 0,0,0,-1,0,-1, 0,-1,0,0,-1,0), nrow=6)
A
isSymmetric(A)
D <- diag(c(2,3,2,3,2,2),6)
L <- D - A
L
A <- matrix(data=c(0,1,1,0,0,0, 1,0,0,1,0,1, 1,0,0,1,0,0,
0,1,1,0,1,0, 0,0,0,1,0,1, 0,1,0,0,1,0), nrow=6)
D <- diag(c(2,3,2,3,2,2),6)
L <- D - A
L
eigen(L)
eigen?
?eigen
eigL <- eigen(L)
eig2 <- eigL$values[-2]
eig2
eigL$values
eig2 <- eigL$values[-2:-2]
eig2
eig2 <- eigL$values[length(eigL$values)-2]
eig2
next2last <- length(eigL$values)-2
eig2 <- eigL$values[next2last]
eigvect2 <- eigL$vectors[,next2last]
eigvect2
next2last <- length(eigL$values)-1
eigval2 <- eigL$values[next2last]
eigvect2 <- eigL$vectors[,next2last]
eigL
eigvect2
t(eigvect2)
eigL[,5]
eigL$vectors[,5]
eigL$vectors[,5:]
eigL$vectors[,5:6]
5*113
75*9
75*7
75*5
mean(825,675,375)
mean(c(825,675,375))
mean(c(825,675,37))
mean(c(675,375,375))
mean(c(675,975,525))
mean(c(1125,75,525))
library(devtools)
library(slidify)
publish(title = 'CapiTool', 'index.html', host = 'rpubs')
setwd("Google Drive/Programming/R/CapiTool/CapiToolSlidify/")
publish(title = 'CapiTool', 'index.html', host = 'rpubs')
